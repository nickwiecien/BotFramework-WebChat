"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var defaultAdaptiveCardsPackage = _interopRequireWildcard(require("adaptivecards"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _AdaptiveCardsContext = _interopRequireDefault(require("./AdaptiveCardsContext"));

var AdaptiveCardsComposer = function AdaptiveCardsComposer(_ref) {
  var adaptiveCardsHostConfig = _ref.adaptiveCardsHostConfig,
      adaptiveCardsPackage = _ref.adaptiveCardsPackage,
      children = _ref.children;
  var patchedAdaptiveCardsPackage = (0, _react.useMemo)(function () {
    return adaptiveCardsPackage || defaultAdaptiveCardsPackage;
  }, [adaptiveCardsPackage]);
  var adaptiveCardsContext = (0, _react.useMemo)(function () {
    return {
      adaptiveCardsPackage: patchedAdaptiveCardsPackage,
      hostConfigFromProps: adaptiveCardsHostConfig
    };
  }, [adaptiveCardsHostConfig, patchedAdaptiveCardsPackage]);
  return _react.default.createElement(_AdaptiveCardsContext.default.Provider, {
    value: adaptiveCardsContext
  }, children);
};

AdaptiveCardsComposer.defaultProps = {
  adaptiveCardsHostConfig: undefined,
  adaptiveCardsPackage: undefined,
  children: undefined
};
AdaptiveCardsComposer.propTypes = {
  adaptiveCardsHostConfig: _propTypes.default.any,
  adaptiveCardsPackage: _propTypes.default.any,
  children: _propTypes.default.any
};
var _default = AdaptiveCardsComposer;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hZGFwdGl2ZUNhcmRzL0FkYXB0aXZlQ2FyZHNDb21wb3Nlci5qcyJdLCJuYW1lcyI6WyJBZGFwdGl2ZUNhcmRzQ29tcG9zZXIiLCJhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZyIsImFkYXB0aXZlQ2FyZHNQYWNrYWdlIiwiY2hpbGRyZW4iLCJwYXRjaGVkQWRhcHRpdmVDYXJkc1BhY2thZ2UiLCJkZWZhdWx0QWRhcHRpdmVDYXJkc1BhY2thZ2UiLCJhZGFwdGl2ZUNhcmRzQ29udGV4dCIsImhvc3RDb25maWdGcm9tUHJvcHMiLCJkZWZhdWx0UHJvcHMiLCJ1bmRlZmluZWQiLCJwcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhbnkiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBRUEsSUFBTUEscUJBQXFCLEdBQUcsU0FBeEJBLHFCQUF3QixPQUFpRTtBQUFBLE1BQTlEQyx1QkFBOEQsUUFBOURBLHVCQUE4RDtBQUFBLE1BQXJDQyxvQkFBcUMsUUFBckNBLG9CQUFxQztBQUFBLE1BQWZDLFFBQWUsUUFBZkEsUUFBZTtBQUM3RixNQUFNQywyQkFBMkIsR0FBRyxvQkFBUTtBQUFBLFdBQU1GLG9CQUFvQixJQUFJRywyQkFBOUI7QUFBQSxHQUFSLEVBQW1FLENBQ3JHSCxvQkFEcUcsQ0FBbkUsQ0FBcEM7QUFJQSxNQUFNSSxvQkFBb0IsR0FBRyxvQkFDM0I7QUFBQSxXQUFPO0FBQ0xKLE1BQUFBLG9CQUFvQixFQUFFRSwyQkFEakI7QUFFTEcsTUFBQUEsbUJBQW1CLEVBQUVOO0FBRmhCLEtBQVA7QUFBQSxHQUQyQixFQUszQixDQUFDQSx1QkFBRCxFQUEwQkcsMkJBQTFCLENBTDJCLENBQTdCO0FBUUEsU0FBTyw2QkFBQyw2QkFBRCxDQUFzQixRQUF0QjtBQUErQixJQUFBLEtBQUssRUFBRUU7QUFBdEMsS0FBNkRILFFBQTdELENBQVA7QUFDRCxDQWREOztBQWdCQUgscUJBQXFCLENBQUNRLFlBQXRCLEdBQXFDO0FBQ25DUCxFQUFBQSx1QkFBdUIsRUFBRVEsU0FEVTtBQUVuQ1AsRUFBQUEsb0JBQW9CLEVBQUVPLFNBRmE7QUFHbkNOLEVBQUFBLFFBQVEsRUFBRU07QUFIeUIsQ0FBckM7QUFNQVQscUJBQXFCLENBQUNVLFNBQXRCLEdBQWtDO0FBQ2hDVCxFQUFBQSx1QkFBdUIsRUFBRVUsbUJBQVVDLEdBREg7QUFFaENWLEVBQUFBLG9CQUFvQixFQUFFUyxtQkFBVUMsR0FGQTtBQUdoQ1QsRUFBQUEsUUFBUSxFQUFFUSxtQkFBVUM7QUFIWSxDQUFsQztlQU1lWixxQiIsInNvdXJjZVJvb3QiOiJidW5kbGU6Ly8vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZGVmYXVsdEFkYXB0aXZlQ2FyZHNQYWNrYWdlIGZyb20gJ2FkYXB0aXZlY2FyZHMnO1xyXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xyXG5pbXBvcnQgUmVhY3QsIHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JztcclxuXHJcbmltcG9ydCBBZGFwdGl2ZUNhcmRzQ29udGV4dCBmcm9tICcuL0FkYXB0aXZlQ2FyZHNDb250ZXh0JztcclxuXHJcbmNvbnN0IEFkYXB0aXZlQ2FyZHNDb21wb3NlciA9ICh7IGFkYXB0aXZlQ2FyZHNIb3N0Q29uZmlnLCBhZGFwdGl2ZUNhcmRzUGFja2FnZSwgY2hpbGRyZW4gfSkgPT4ge1xyXG4gIGNvbnN0IHBhdGNoZWRBZGFwdGl2ZUNhcmRzUGFja2FnZSA9IHVzZU1lbW8oKCkgPT4gYWRhcHRpdmVDYXJkc1BhY2thZ2UgfHwgZGVmYXVsdEFkYXB0aXZlQ2FyZHNQYWNrYWdlLCBbXHJcbiAgICBhZGFwdGl2ZUNhcmRzUGFja2FnZVxyXG4gIF0pO1xyXG5cclxuICBjb25zdCBhZGFwdGl2ZUNhcmRzQ29udGV4dCA9IHVzZU1lbW8oXHJcbiAgICAoKSA9PiAoe1xyXG4gICAgICBhZGFwdGl2ZUNhcmRzUGFja2FnZTogcGF0Y2hlZEFkYXB0aXZlQ2FyZHNQYWNrYWdlLFxyXG4gICAgICBob3N0Q29uZmlnRnJvbVByb3BzOiBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZ1xyXG4gICAgfSksXHJcbiAgICBbYWRhcHRpdmVDYXJkc0hvc3RDb25maWcsIHBhdGNoZWRBZGFwdGl2ZUNhcmRzUGFja2FnZV1cclxuICApO1xyXG5cclxuICByZXR1cm4gPEFkYXB0aXZlQ2FyZHNDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXthZGFwdGl2ZUNhcmRzQ29udGV4dH0+e2NoaWxkcmVufTwvQWRhcHRpdmVDYXJkc0NvbnRleHQuUHJvdmlkZXI+O1xyXG59O1xyXG5cclxuQWRhcHRpdmVDYXJkc0NvbXBvc2VyLmRlZmF1bHRQcm9wcyA9IHtcclxuICBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZzogdW5kZWZpbmVkLFxyXG4gIGFkYXB0aXZlQ2FyZHNQYWNrYWdlOiB1bmRlZmluZWQsXHJcbiAgY2hpbGRyZW46IHVuZGVmaW5lZFxyXG59O1xyXG5cclxuQWRhcHRpdmVDYXJkc0NvbXBvc2VyLnByb3BUeXBlcyA9IHtcclxuICBhZGFwdGl2ZUNhcmRzSG9zdENvbmZpZzogUHJvcFR5cGVzLmFueSxcclxuICBhZGFwdGl2ZUNhcmRzUGFja2FnZTogUHJvcFR5cGVzLmFueSxcclxuICBjaGlsZHJlbjogUHJvcFR5cGVzLmFueVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQWRhcHRpdmVDYXJkc0NvbXBvc2VyO1xyXG4iXX0=